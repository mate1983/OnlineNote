tab_${tableName}.sql

<#assign pkFileds="" />
<#list columnList as dbColumn>
	<#if dbColumn.key == "PRI">
		<#if pkFileds != "">
	 		<#assign pkFileds= pkFileds + ","/>
	 	</#if>
	 	<#assign pkFileds= pkFileds + dbColumn.name/>
	 	
	 </#if>  
</#list>  

CREATE TABLE ${name} (
<#list columnList as dbColumn>
  ${dbColumn.name} ${dbColumn.type} <#if dbColumn.nullable == false>NOT NULL</#if> <#if dbColumn.defaultSetting != "">DEFAULT ${dbColumn.defaultSetting}</#if> ${dbColumn.extra} COMMENT '${dbColumn.comment}' <#if dbColumn_has_next>,<#elseif pkFileds!="">,</#if>
</#list>    
  PRIMARY KEY (${pkFileds})
);
alter table ${name}  COMMENT='${remark}';

<#list ukIndexList as ukIndex>
create index  ${ukIndex.name} on ${name}
(
   ${ukIndex.column}
);
</#list>    
  

Starter.java

package com.tools.ndb.gen;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.util.HashMap;
import java.util.Map;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

import freemarker.template.Configuration;
import freemarker.template.Template;
import freemarker.template.TemplateException;

public class Starter {

	/**
	 * @param args
	 * @throws IOException
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		if (null == args || args.length == 0) {
			System.out.println("------------------------------------------------------------------------");
			System.out.println("请输入要生成NDB的表名称，多张表用空格分隔！");
			System.out.println("如果要调整数据库连接及生成NDB的目标目录,请修改jar包中的applicationContext.xml相关配置");
			System.out.println("------------------------------------------------------------------------");
			return;
		}
		ApplicationContext ctx = new ClassPathXmlApplicationContext(
				new String[] { "applicationContext.xml" });
		TableFactory tableFactory = (TableFactory) ctx.getBean("tableFactory");

		// call freemarker gen .sql file
		try {
			Configuration cfg = new Configuration();

			cfg.setClassForTemplateLoading(Starter.class, "/");
			cfg.setDefaultEncoding("UTF-8");
			Template template = cfg.getTemplate("tab_${tableName}.sql");

			Writer out = new OutputStreamWriter(System.out);// 打印到控制台
			String configPath = tableFactory.getTargetPath();
			String targetPath = configPath.endsWith(File.separator) ? configPath : configPath
					+ File.separator;
			// 生成到文件
			for (String tableName : args) {
				Table table = tableFactory.buildTable(tableName);
				Writer outFile = new OutputStreamWriter(new FileOutputStream(targetPath
						+ buildOutFileName(template.getName(), table)), "UTF-8");
				template.process(table, out);
				template.process(table, outFile);
				out.flush();
				outFile.flush();
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}

	public static String getTemplateFile(final String fileName) throws IOException {
		InputStream is = Starter.class.getClass().getResourceAsStream("/" + fileName);
		BufferedReader br = new BufferedReader(new InputStreamReader(is));
		StringBuffer sb = new StringBuffer();
		String s;
		while ((s = br.readLine()) != null)
			sb.append(s);
		return sb.toString();
	}

	public static String buildOutFileName(final String inFileName, final Table table)
			throws TemplateException, IOException {
		Configuration cfg = new Configuration();
		cfg.setTemplateLoader(new StringTemplateLoader(inFileName));
		cfg.setDefaultEncoding("UTF-8");
		Template template = cfg.getTemplate(StringTemplateLoader.DEFAULT_TEMPLATE_KEY);

		StringWriter writer = new StringWriter();
		Map map = new HashMap();
		map.put("tableName", table.getName());
		template.process(map, writer);

		return writer.toString();
	}

}


TableFactory.java
package com.tools.ndb.gen;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;

import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.util.ObjectUtils;

public class TableFactory {
	private JdbcTemplate jdbcTemplate;
	private String targetPath;

	public Table buildTable(String tableName) {
		Table table = new Table();
		table.setName(tableName);
		//
		buildBaseInfo(table);
		buildColumnList(table);
		buildUKIndexList(table);
		return table;

	}

	private void buildBaseInfo(Table table) {		
		Map map = jdbcTemplate
				.queryForMap("SELECT table_comment FROM information_schema.tables WHERE table_name = '"
						+ table.getName() + "'");
		table.setRemark(ObjectUtils.getDisplayString(map.get("table_comment")));
	}

	private void buildColumnList(Table table) {
		String sql = "show full fields from " + table.getName();
		List<Column> list = (List<Column>) jdbcTemplate.query(sql, new RowMapper() {
			public Object mapRow(ResultSet rs, int arg1) throws SQLException {
				// TODO Auto-generated method stub
				Column column = new Column();
				column.setName(rs.getString("Field"));
				column.setType(rs.getString("Type"));
				column.setNullable("YES".equals(rs.getString("Null")) ? true : false);
				column.setKey(rs.getString("Key"));
				column.setDefaultSetting(ObjectUtils.getDisplayString(rs.getString("Default")));
				column.setExtra(rs.getString("Extra"));
				column.setComment(rs.getString("Comment"));

				return column;
			}
		});

		table.setColumnList(list);
	}

	private void buildUKIndexList(Table table) {
		String sql = "SELECT * FROM information_schema.statistics WHERE table_name  = '"
				+ table.getName() + "' and non_unique =0 and INDEX_name !='PRIMARY'";
		List<UKIndex> list = jdbcTemplate.query(sql, new RowMapper() {
			public Object mapRow(ResultSet rs, int arg1) throws SQLException {
				UKIndex ukIndex = new UKIndex();
				ukIndex.setColumn(rs.getString("COLUMN_NAME"));
				ukIndex.setName(rs.getString("INDEX_NAME"));

				return ukIndex;
			}
		});

		table.setUkIndexList(list);
	}

	public void setJdbcTemplate(JdbcTemplate jdbcTemplate) {
		this.jdbcTemplate = jdbcTemplate;
	}

	public void setTargetPath(String targetPath) {
		this.targetPath = targetPath;
	}

	public String getTargetPath() {
		return targetPath;
	}

}
