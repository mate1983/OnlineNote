
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Pattern;

public class Hero {
	private static List<LineItem> dataList = new ArrayList<LineItem>();

	/**
	 * @param args
	 * @throws IOException
	 */
	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		if (null == args || args.length == 0) {
			System.out.println("请输入流水数据文件路径。");
			return;
		}
		File file = new File(args[0]);
		if (!file.exists() || file.isDirectory())
			throw new FileNotFoundException("流水数据文件不存在");
		FileInputStream fis = new FileInputStream(file);
		InputStreamReader read = new InputStreamReader(new FileInputStream(file), "GBK");// 考虑到编码格式
		BufferedReader bufferedReader = new BufferedReader(read);
		int lineCount = 0;
		String headString = "";
		String lineTxt = null;

		while ((lineTxt = bufferedReader.readLine()) != null) {
			if (++lineCount >= 26) {
				System.out.println("输入的数据不能大于25,请重新整理输入流水数据文件.");
				return;
			}
			// 跳过行头
			if (lineCount == 1) {
				headString = lineTxt;
				continue;
			}
			dataList.add(new LineItem(lineCount, lineTxt));
		}
		fis.close();

		if (dataList.size() > 0) {
			dataList.get(0).split();
			dataList.get(0).process();
			System.out.println(headString);
			dataList.get(0).print();
			for (int i = 1; i < dataList.size(); i++) {
				dataList.get(i).split();
				dataList.get(i).process(dataList.get(i - 1).getBalance());
				dataList.get(i).print();
			}
		}
	}

}

class LineItem {
	private static Pattern floatPattern = Pattern.compile("^(-?\\d+)(\\.\\d+)?$");
	private static Pattern intPattern = Pattern.compile("^\\d*[1-9]\\d*$");
	private String inputString;
	private Integer index;
	private Integer no;
	private Float in;
	private Float out;
	private Float balance;
	private int hasValCount;// 有值的个数：第一行为2时可计算，第三行为2且前一年有余额可计算，为3直接进行计算。

	public LineItem(int index, String input) {
		this.index = index;
		inputString = input;
	}

	public void split() {
		String[] part = inputString.split(";");
		if (null == part || part.length != 4) {
			hasValCount = -1;
			return;
		}

		if (!intPattern.matcher(part[0].trim()).find()) {
			hasValCount = -1;
			return;
		} else {
			this.no = Integer.parseInt(part[0]);
		}

		hasValCount = 0;
		for (int i = 1; i < part.length; i++) {
			part[i] = part[i].trim();
			if ("?".equals(part[i]))
				continue;
			if (!floatPattern.matcher(part[i]).find()) {
				hasValCount = -1;
				break;
			}
			hasValCount++;
		}
		this.in = "?".equals(part[1].trim()) ? null : Float.parseFloat(part[1].trim());
		this.out = "?".equals(part[2].trim()) ? null : Float.parseFloat(part[2].trim());
		this.balance = "?".equals(part[3].trim()) ? null : Float.parseFloat(part[3].trim());
	}

	public void process() {
		if (1 == index && hasValCount < 2)
			return;
		if (index > 1 && hasValCount != 3)
			return;
		if (null == getIn()) {// in = balance+out;
			setIn(getBalance() + this.getOut());
			hasValCount += 1;
		} else if (null == getOut()) {// out = befoerBlance + in - balance
			setOut(getIn() - getBalance());
			hasValCount += 1;
		} else if (null == getBalance()) {// balance = beforeBlance+ in-out
			setBalance(getIn() - getOut());
			hasValCount += 1;
		}
	}

	public void process(Float befoerBalance) {
		if (3 == hasValCount)
			return;
		if (2 == hasValCount && null == befoerBalance) {
			return;
		}
		if (null == getIn())// in = balance+out-befoerBalance;
			setIn(getBalance() + getOut() - befoerBalance);
		else if (null == getOut())// out = befoerBlance + in - balance
			setOut(befoerBalance + getIn() - getBalance());
		else if (null == getBalance())// balance = beforeBlance+ in-out
			setBalance(befoerBalance + getIn() - getOut());
		hasValCount++;
	}

	public void print() {
		if (hasValCount == 3)
			System.out.println(getNo() + ";" + String.format("%.2f", getIn()) + ";"
					+ String.format("%.2f", getOut()) + ";" + String.format("%.2f", getBalance()));
		else
			System.out.println(inputString);
	}

	public static Pattern getFloatPattern() {
		return floatPattern;
	}

	public static void setFloatPattern(Pattern floatPattern) {
		LineItem.floatPattern = floatPattern;
	}

	public static Pattern getIntPattern() {
		return intPattern;
	}

	public static void setIntPattern(Pattern intPattern) {
		LineItem.intPattern = intPattern;
	}

	public String getInputString() {
		return inputString;
	}

	public void setInputString(String inputString) {
		this.inputString = inputString;
	}

	public Integer getIndex() {
		return index;
	}

	public void setIndex(Integer index) {
		this.index = index;
	}

	public Integer getNo() {
		return no;
	}

	public void setNo(Integer no) {
		this.no = no;
	}

	public Float getIn() {
		return in;
	}

	public void setIn(Float in) {
		this.in = in;
	}

	public Float getOut() {
		return out;
	}

	public void setOut(Float out) {
		this.out = out;
	}

	public Float getBalance() {
		return balance;
	}

	public void setBalance(Float balance) {
		this.balance = balance;
	}

	public int getHasValCount() {
		return hasValCount;
	}

	public void setHasValCount(int hasValCount) {
		this.hasValCount = hasValCount;
	}
}
